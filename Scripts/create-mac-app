#!/usr/bin/env bash

set -eo pipefail

APP_NAME="$1"
ICON_PATH="$2"
ICON_TMP_DIR="`mktemp -d`/Icon.iconset"

if [[ -z "$APP_NAME" ]]
then
  echo ""
  echo "USAGE: ./`basename "$0"` APP_NAME [ICON_PATH] [--update]"
  echo ""
  echo "    APP_NAME     Generally a single word, like \"Chat\""
  echo "    ICON_PATH    OPTIONAL: Path to be a `tput bold`.png`tput sgr0` image"
  echo "    --update     OPTIONAL: rebuild Swift code and update the icon"
  echo ""
  exit 1
fi

if [[ "$3" == --update ]]
then
  echo "Updating $APP_NAME.app..."
elif [[ -e "$APP_NAME.app" ]]
then
  echo "ERROR: ./$APP_NAME.app already exists! You should either remove it or rerun this script with --update."
  exit 2
else
  echo "Creating $APP_NAME.app..."
  mkdir -p "$APP_NAME.app/Contents/Resources"
  chmod +x "$APP_NAME.app"
  touch "$APP_NAME.app/Contents/Info.plist"
  echo '<?xml version="1.0" encoding="UTF-8"?>'                                                                 >> "$APP_NAME.app/Contents/Info.plist"
  echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> "$APP_NAME.app/Contents/Info.plist"
  echo '<plist version="1.0">'                                                                                  >> "$APP_NAME.app/Contents/Info.plist"
  echo '  <dict>'                                                                                               >> "$APP_NAME.app/Contents/Info.plist"
  echo "    <key>CFBundleName</key>                  <string>$APP_NAME</string>"                                >> "$APP_NAME.app/Contents/Info.plist"
  echo "    <key>CFBundleIdentifier</key>            <string>sexy.kofi.multi.$APP_NAME</string>"                >> "$APP_NAME.app/Contents/Info.plist"
  echo '    <key>CFBundleExecutable</key>            <string>Stub</string>'                                     >> "$APP_NAME.app/Contents/Info.plist"
  echo '    <key>CFBundleIconFile</key>              <string>Icon.icns</string>'                                >> "$APP_NAME.app/Contents/Info.plist"
  echo '    <key>CFBundlePackageType</key>           <string>APPL</string>'                                     >> "$APP_NAME.app/Contents/Info.plist"
  echo '    <key>CFBundleInfoDictionaryVersion</key> <string>6.0</string>'                                      >> "$APP_NAME.app/Contents/Info.plist"
  echo '    <key>CFBundleVersion</key>               <string>0.1.1</string>'                                    >> "$APP_NAME.app/Contents/Info.plist"
  echo '    <key>CFBundleGetInfoString</key>         <string>0.1</string>'                                      >> "$APP_NAME.app/Contents/Info.plist"
  echo '    <key>CFBundleShortVersionString</key>    <string>0.1</string>'                                      >> "$APP_NAME.app/Contents/Info.plist"
  echo '    <key>NSPrincipalClass</key>              <string>NSApplication</string>'                            >> "$APP_NAME.app/Contents/Info.plist"
  echo '    <key>NSMainNibFile</key>                 <string>MainMenu</string>'                                 >> "$APP_NAME.app/Contents/Info.plist"
  echo '  </dict>'                                                                                              >> "$APP_NAME.app/Contents/Info.plist"
  echo '</plist>'                                                                                               >> "$APP_NAME.app/Contents/Info.plist"
fi
 
swift build
cp .build/x86*/debug/Stub "$APP_NAME.app/Stub"

if [[ ! -z "$ICON_PATH" ]]
then
  mkdir -p $ICON_TMP_DIR
  sips -z 16 16     "$ICON_PATH" --out "$ICON_TMP_DIR/icon_16x16.png"      > /dev/null
  sips -z 32 32     "$ICON_PATH" --out "$ICON_TMP_DIR/icon_16x16@2x.png"   > /dev/null
  sips -z 32 32     "$ICON_PATH" --out "$ICON_TMP_DIR/icon_32x32.png"      > /dev/null
  sips -z 64 64     "$ICON_PATH" --out "$ICON_TMP_DIR/icon_32x32@2x.png"   > /dev/null
  sips -z 128 128   "$ICON_PATH" --out "$ICON_TMP_DIR/icon_128x128.png"    > /dev/null
  sips -z 256 256   "$ICON_PATH" --out "$ICON_TMP_DIR/icon_128x128@2x.png" > /dev/null
  sips -z 256 256   "$ICON_PATH" --out "$ICON_TMP_DIR/icon_256x256.png"    > /dev/null
  sips -z 512 512   "$ICON_PATH" --out "$ICON_TMP_DIR/icon_256x256@2x.png" > /dev/null
  sips -z 512 512   "$ICON_PATH" --out "$ICON_TMP_DIR/icon_512x512.png"    > /dev/null
  sips -z 1024 1024 "$ICON_PATH" --out "$ICON_TMP_DIR/icon_512x512@2x.png" > /dev/null
  iconutil -c icns --output "$APP_NAME.app/Contents/Resources/Icon.icns" "$ICON_TMP_DIR"
fi

echo "Done!"
