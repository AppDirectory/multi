#!/usr/bin/env bash

set -eo pipefail

# This script creates another script, which calls create-mac-app.
#
# (╯°□°）╯︵ ┻━┻
#
# We do it this way because `open` does not seem to inherit the parent
# environment, and `NSWorkspace.OpenConfiguration` requires macOS 10.15+. We
# want to use `open` here because it provides a clean way to allow the script
# to become the interface. This saves us from needing to communicate errors
# that heppen in the script to the user via the Swift app. We also need to be
# careful of dangerous characters in the environment variables, so we need
# printf's "%q" syntax. This is a circuituous implementation, but seems to be
# the cleanest way.

TMP_SCRIPT=`mktemp`

echo "#!/usr/bin/env bash"                                  >> "$TMP_SCRIPT"
printf "export MULTI_APP_NAME=%q\n"    "$MULTI_APP_NAME"    >> "$TMP_SCRIPT"
printf "export MULTI_ICON_PATH=%q\n"   "$MULTI_ICON_PATH"   >> "$TMP_SCRIPT"
printf "export MULTI_JSON_CONFIG=%q\n" "$MULTI_JSON_CONFIG" >> "$TMP_SCRIPT"
printf "export MULTI_OVERWRITE=%q\n"   "$MULTI_OVERWRITE"   >> "$TMP_SCRIPT"
printf "export MULTI_REPLACE_PID=%q\n" "$MULTI_REPLACE_PID" >> "$TMP_SCRIPT"
echo "`dirname $0`/create-mac-app"                          >> "$TMP_SCRIPT"

chmod +x "$TMP_SCRIPT"
open -a Terminal "$TMP_SCRIPT"
